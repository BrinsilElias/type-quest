---
import Clock from '../assets/clock.svg';
import AtIcon from '../assets/at-icon.svg';
import HashIcon from '../assets/hash-icon.svg';
import WordCount from '../assets/letter-text.svg';

import Setting from './Setting.astro';
---

<style>
  form {
    gap: var(--space-m);
    padding: var(--space-xs);
    max-width: max-content;
    flex-wrap: nowrap;
    overflow-x: auto;
    margin-inline: auto;
    background-color: var(--clr-neutral-100);
    border: 1px solid var(--clr-border-light);
    border-radius: var(--border-radius-md);
    box-shadow:
      0px 12px 16px -4px rgba(16, 24, 40, 0.08),
      0px 4px 6px -2px rgba(16, 24, 40, 0.03);

    svg {
      stroke: var(--fg-color);
    }
  }
  fieldset:not(:nth-last-child(-n + 2)) {
    padding-right: var(--space-m);
    border-right: 3px solid var(--clr-border-dark);
  }
  menu {
    min-width: max-content;
    flex-wrap: nowrap;
    justify-content: center;
    gap: var(--space-s);
  }
</style>

<form class="cluster">
  <fieldset class="text-config">
    <legend class="sr-only">Punctuation and Numbers</legend>
    <menu class="cluster">
      <Setting id="punctuation" value="punctuation" type="checkbox">
        <AtIcon />
        Punctuation
      </Setting>
      <Setting id="numbers" value="numbers" type="checkbox">
        <HashIcon />
        Numbers
      </Setting>
    </menu>
  </fieldset>
  <fieldset class="mode-config">
    <legend class="sr-only">Typing Mode</legend>
    <menu class="cluster">
      <Setting
        id="timer-mode"
        value="timer"
        type="radio"
        name="typing-mode"
        checked><Clock />Timer Mode</Setting
      >
      <Setting
        id="word-count-mode"
        value="wordCount"
        type="radio"
        name="typing-mode"><WordCount />Word Count Mode</Setting
      >
    </menu>
  </fieldset>
  <fieldset class="timer-config">
    <legend class="sr-only">Timer</legend>
    <menu class="cluster">
      <Setting id="timer-15" value="15" type="radio" name="timer" checked
        >15</Setting
      >
      <Setting id="timer-30" value="30" type="radio" name="timer">30</Setting>
      <Setting id="timer-60" value="60" type="radio" name="timer">60</Setting>
      <Setting id="timer-120" value="120" type="radio" name="timer">120</Setting
      >
    </menu>
  </fieldset>
  <fieldset class="word-count-config">
    <legend class="sr-only">Word Count</legend>
    <menu class="cluster">
      <Setting
        id="word-count-10"
        value="10"
        type="radio"
        name="word-count"
        checked>10</Setting
      >
      <Setting id="word-count-25" value="25" type="radio" name="word-count"
        >25</Setting
      >
      <Setting id="word-count-50" value="50" type="radio" name="word-count"
        >50</Setting
      >
      <Setting id="word-count-100" value="100" type="radio" name="word-count"
        >100</Setting
      >
    </menu>
  </fieldset>
</form>

<script>
  import { fmtTimeInterval } from '../scripts/utility.ts';

  const $typingMode = $('p.typing-mode');
  const $timerInput = $('input[name="timer"]');
  const $wordCountInput = $('input[name="word-count"]');
  const $typingModeInputs = $('input[name="typing-mode"]');

  const initialDuration = Number($timerInput.val());
  const initialMode = $typingModeInputs.filter(':checked').val() as
    | 'timer'
    | 'wordCount';

  const updateTimerDisplay = (duration: number) => {
    $typingMode.html(
      `<time\
        datetime="${fmtTimeInterval(duration, 'Xm Ys')}">\
        ${fmtTimeInterval(duration)}</time>`,
    );
  };

  const updateWordCountDisplay = (wordCount: number) => {
    $typingMode.html(
      `<span>0 / <span class="word-count">${wordCount}</span></span>`,
    );
  };

  const toggleModeVisibility = (mode: 'timer' | 'wordCount') => {
    const $timerConfig = $('fieldset.timer-config');
    const $wordCountConfig = $('fieldset.word-count-config');
    const isTimerMode = mode === 'timer';
    $wordCountConfig.toggle(!isTimerMode);
    $timerConfig.toggle(isTimerMode);

    if (isTimerMode) {
      let duration = Number($timerInput.filter(':checked').val());
      updateTimerDisplay(duration);
    } else {
      let wordCount = Number($wordCountInput.filter(':checked').val());
      updateWordCountDisplay(wordCount);
    }
  };

  $typingModeInputs.on('change', () => {
    const mode = $typingModeInputs.filter(':checked').val() as
      | 'timer'
      | 'wordCount';
    toggleModeVisibility(mode);
  });

  $timerInput.on('change', () => {
    let duration = Number($timerInput.filter(':checked').val());
    if (!isNaN(duration)) {
      updateTimerDisplay(duration);
    }
  });

  $wordCountInput.on('change', () => {
    let wordCount = Number($wordCountInput.filter(':checked').val());
    if (!isNaN(wordCount)) {
      updateWordCountDisplay(wordCount);
    }
  });

  toggleModeVisibility(initialMode);
  updateTimerDisplay(initialDuration);
</script>
